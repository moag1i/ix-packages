name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        cd ix-auth
        uv venv
        uv sync --dev

    - name: Run linting
      run: |
        cd ix-auth
        uv run ruff check src/ tests/
        uv run ruff format --check src/ tests/

    - name: Run type checking
      run: |
        cd ix-auth
        uv run mypy src/ix_auth

    - name: Run tests with coverage
      env:
        AUTH_JWT_SECRET: test-secret-key
        AUTH_ADMIN_DB_HOST: localhost
        AUTH_ADMIN_DB_PORT: 5432
        AUTH_ADMIN_DB_NAME: test_db
        AUTH_ADMIN_DB_USER: postgres
        AUTH_ADMIN_DB_PASSWORD: postgres
      run: |
        cd ix-auth
        uv run pytest tests/ -v --cov=ix_auth --cov-report=term-missing --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./ix-auth/coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        cd ix-auth
        bandit -r src/ -ll -x "*/tests/*,*/__pycache__/*"

    - name: Check for known vulnerabilities
      run: |
        cd ix-auth
        pip install -e .
        safety check

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build tools
      run: |
        pip install --upgrade pip
        pip install build wheel twine

    - name: Build distribution packages
      run: |
        cd ix-auth
        python -m build

    - name: Check package with twine
      run: |
        cd ix-auth
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: ix-auth/dist/

  publish:
    name: Publish to Package Registry
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: ${{ secrets.PACKAGE_REGISTRY_URL }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/

    - name: Install twine
      run: pip install twine

    # Option A: Publish to GitHub Packages (PyPI)
    - name: Publish to GitHub Packages
      if: ${{ vars.PACKAGE_REGISTRY == 'github' }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        twine upload --repository-url https://ghcr.io/pypi/${{ github.repository_owner }}/ dist/*

    # Option B: Publish to AWS CodeArtifact
    - name: Configure AWS credentials
      if: ${{ vars.PACKAGE_REGISTRY == 'aws' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Publish to AWS CodeArtifact
      if: ${{ vars.PACKAGE_REGISTRY == 'aws' }}
      run: |
        aws codeartifact login --tool twine \
          --domain ${{ vars.CODEARTIFACT_DOMAIN }} \
          --repository ${{ vars.CODEARTIFACT_REPO }}
        twine upload dist/*

    # Option C: Publish to Azure Artifacts
    - name: Publish to Azure Artifacts
      if: ${{ vars.PACKAGE_REGISTRY == 'azure' }}
      env:
        TWINE_USERNAME: azure
        TWINE_PASSWORD: ${{ secrets.AZURE_DEVOPS_PAT }}
        TWINE_REPOSITORY_URL: ${{ secrets.AZURE_ARTIFACTS_URL }}
      run: |
        twine upload dist/*

    # Option D: Publish to private PyPI (Artifactory/Nexus)
    - name: Publish to Private PyPI
      if: ${{ vars.PACKAGE_REGISTRY == 'private' }}
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        TWINE_REPOSITORY_URL: ${{ secrets.PRIVATE_PYPI_URL }}
      run: |
        twine upload dist/*

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        generate_release_notes: true